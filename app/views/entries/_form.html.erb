<%= content_tag(:div, "", id: 'journal-year', data: {source: @journal.year}) %>
<%= hidden_field_tag :journal_blocked_to, @journal.blocked_to %>

<%= form_for(@entry) do |f| %>
  <%= f.hidden_field :referer, { value: @referer } %>
  <% if @entry.errors.any? %>
    <div id="error_explanation">
      <h2>Wystąpiły błędy podczas próby zapisu:</h2>

      <ul>
      <% @entry.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="row">
    <div class="col-md-6">
      <div class="well">
        <div class="row">
          <div class="col-md-3">
            <%= f.label :data %> <span class="text-danger">*</span>
            <% if @is_auto_import_bank && !current_user.is_superadmin %>
              <%= f.text_field :date, class: "form-control", required: true, disabled: true %>
              <%= f.hidden_field :date %>
            <% else %>
              <%= f.text_field :date, class: "form-control", required: true %>
            <% end %>
          </div>
          <% if @journal.journal_type_id == JournalType::BANK_TYPE_ID %>
            <div class="col-md-3">
              <%= f.label :Numer_wyciągu %> <span class="text-danger">*</span>
              <%= f.text_field :statement_number, class: "form-control", required: true %>
            </div>
            <div class="col-md-3 col-md-offset-3">
              <%= f.label :Numer_dokumentu %>
              <%= f.text_field :document_number, class: "form-control" %>
            </div>
          <% else %>
            <div class="col-md-3 col-md-offset-3">
              <%= f.label :Numer_dokumentu %> <span class="text-danger">*</span>
              <%= f.text_field :document_number, class: "form-control", required: true %>
            </div>
          <% end %>
        </div>
        <div class="row top-buffer-20">
          <div class="col-md-12">
            <%= f.label :Opis %> <span class="text-danger">*</span>
            <%= f.text_field :name, class: "form-control", required: true %>
          </div>
        </div>
        
        <% if @entry.id.present? && params[:type_changed].blank? %>
        <%# Pokaż opcję zmiany typu tylko podczas edycji istniejącego wpisu (nie przy dodawaniu) %>
        <div class="row top-buffer-20">
          <div class="col-md-12">
            <label>Typ wpisu:</label>
            <div class="radio">
              <%= f.radio_button :is_expense, false, id: "entry_type_income", onclick: "handleEntryTypeChange(false)" %>
              <%= f.label :is_expense, "Wpływ", value: false, for: "entry_type_income" %>
            </div>
            <div class="radio">
              <%= f.radio_button :is_expense, true, id: "entry_type_expense", onclick: "handleEntryTypeChange(true)" %>
              <%= f.label :is_expense, "Wydatek", value: true, for: "entry_type_expense" %>
            </div>
            <div class="help-block">
              <small class="text-muted">Zmiana typu wpisu spowoduje przeniesienie wszystkich wartości do pierwszej kategorii nowego typu. 
              Po zmianie typu wpisu należy zapisać zmiany, aby móc wprowadzić inne modyfikacje.</small>
            </div>
          </div>
        </div>
        <% elsif params[:type_changed].present? %>
        <%# Po zmianie typu nie można go ponownie zmienić przed zapisaniem %>
        <div class="row top-buffer-20">
          <div class="col-md-12">
            <label>Typ wpisu:</label>
            <div class="alert alert-warning" role="alert">
              Typ wpisu został zmieniony na <strong><%= @entry.is_expense ? 'wydatek' : 'wpływ' %></strong>. 
              Aby zapisać zmiany, kliknij przycisk "Zapisz" poniżej. Aby zmienić ponownie typ wpisu, musisz najpierw zapisać bieżące zmiany.
            </div>
            <%= f.hidden_field :is_expense, value: @entry.is_expense %>
          </div>
        </div>
        <% else %>
        <%# Dla nowego wpisu, ukryj opcję wyboru typu %>
        <%= f.hidden_field :is_expense, value: @entry.is_expense %>
        <% end %>
      </div>

    </div>

    <div class="col-md-12" id="categories-container">
      <%= f.fields_for :items, @sorted_items do |item_fields| %>
        <div class="row top-buffer-20">
          <% category_name = item_fields.object.category.name %>

          <div class="col-md-2">
            <% #item amount %>
            <%= item_fields.label :amount, category_name %>
            <%= item_fields.text_field :amount, :class=>"category form-control" %>
          </div>

          <% if @entry.is_expense then %>
            <div class="col-md-2">
              <% #item amount one percent %>
              <%= item_fields.label :amount_one_percent, "w tym 1%" %>
              <%= item_fields.text_field :amount_one_percent, :class=>"category form-control" %>
            </div>

            <% print_item_grants_form(item_fields) %>

          <% end %>
          <%= item_fields.hidden_field :category_id, :class=>"category_id"%>
        </div>
      <% end %>

      <%= f.hidden_field :journal_id, :value => @journal.id %>
    </div>

    <!%-- przenoszenie kwot miedzy ksiazkami na razie wstrzymane --%>
    <% if false && @entry.is_expense %>
      <div class="col-md-6">
        <%= check_box_tag :is_linked, :is_linked, @linked_entry.id, :onclick => "showOrHideLinkedEntry()" %>
        <label for="is_linked">Przenieś do innej książki</label>

        <div id="linked_entry_div">
          <%= fields_for :linked_entry, @linked_entry do |linked_entry| %>
            <%= linked_entry.select :journal_id, options_from_collection_for_select(@other_journals, "id", "journal_type")%>

            <%= linked_entry.fields_for :items do |linked_item_fields| %>
              <%= linked_item_fields.label :amount, linked_item_fields.object.category.name %>
              <%= linked_item_fields.text_field :amount, :class=>"category" %>
              <%= linked_item_fields.hidden_field :category_id, :value => linked_item_fields.object.category.id %>
            <% end %>
          <% end %>
        </div>
      </div>
    <% end %>
  </div>

  <div class="row top-buffer-20">
    <div class="col-md-6">
      <p><span class="text-danger">*</span> - pola wymagane</p>
    </div>
    <div class="col-md-6 text-right">
      <%= f.submit "Zapisz", class: "btn btn-sm btn-success", data: { disable_with: "Zapisywanie..." } %>
      <% if @entry.id.present? %>
        <%= link_to 'Anuluj', @referer, class: "btn btn-sm btn-default" %>
      <% else %>
        <%= link_to 'Anuluj', journal_path(@journal), class: "btn btn-sm btn-default" %>
      <% end %>
    </div>
  </div>
<% end %>
<script type="text/JavaScript">
  showOrHideLinkedEntry();
  
  function handleEntryTypeChange(isExpense) {
    try {
      // Sprawdź, czy formularz jest prawidłowo wypełniony przed zmianą typu
      const date = document.getElementById('entry_date').value;
      const name = document.getElementById('entry_name').value;
      
      // Sprawdź, czy to księga bankowa
      const isBankJournal = <%= @journal.journal_type_id == JournalType::BANK_TYPE_ID ? 'true' : 'false' %>;
      
      let missingFields = [];
      if (!date) missingFields.push('data');
      
      if (isBankJournal) {
        const statementNumber = document.getElementById('entry_statement_number').value;
        if (!statementNumber) missingFields.push('numer wyciągu');
      } else {
        const documentNumber = document.getElementById('entry_document_number').value;
        if (!documentNumber) missingFields.push('numer dokumentu');
      }
      
      if (!name) missingFields.push('opis');
      
      if (missingFields.length > 0) {
        alert('Przed zmianą typu wpisu wypełnij wszystkie wymagane pola: ' + missingFields.join(', ') + '.');
        // Przywróć oryginalny stan przycisków radio
        const currentIsExpense = <%= @entry.is_expense ? 'true' : 'false' %>;
        document.getElementById(currentIsExpense === 'true' ? 'entry_type_expense' : 'entry_type_income').checked = true;
        return;
      }
      
      // Oblicz sumę wszystkich wartości we wpisie
      const currentTotalAmount = calculateTotalAmount();
      
      // Sprawdź, czy to księga bankowa z auto_bank_import
      const isAutoImportBank = <%= @is_auto_import_bank ? 'true' : 'false' %>;
      
      // Zapisz aktualny stan formularza przed zmianą
      const formData = {
        date: date,
        name: name,
        // Dla księgi bankowej z auto_bank_import przemnóż wartość przez -1
        amount: isAutoImportBank ? -currentTotalAmount : currentTotalAmount,
        isExpense: isExpense,
        isAutoImportBank: isAutoImportBank
      };
      
      // Dodaj pola specyficzne dla typu księgi
      if (isBankJournal) {
        formData.statementNumber = document.getElementById('entry_statement_number').value;
        formData.documentNumber = document.getElementById('entry_document_number').value;
      } else {
        formData.documentNumber = document.getElementById('entry_document_number').value;
      }
      
      try {
        // Zapisz dane w localStorage
        localStorage.setItem('entryTypeChangeData', JSON.stringify(formData));
      } catch (e) {
        console.error('Błąd podczas zapisywania danych w localStorage:', e);
        alert('Wystąpił błąd podczas zmiany typu wpisu. Upewnij się, że Twoja przeglądarka obsługuje localStorage.');
        return;
      }
      
      // Przekieruj do odpowiedniego formularza edycji z zachowaniem ID wpisu
      const entryId = window.location.pathname.split('/')[2];
      const journalId = <%= @journal.id %>;
      
      // Odśwież stronę, aby pokazać właściwe kategorie
      window.location.href = `/entries/${entryId}/edit?type_changed=true`;
    } catch (error) {
      console.error('Błąd podczas zmiany typu wpisu:', error);
      alert('Wystąpił nieoczekiwany błąd podczas zmiany typu wpisu. Spróbuj odświeżyć stronę i spróbować ponownie.');
    }
  }
  
  // Funkcja obliczająca łączną sumę wszystkich kategorii
  function calculateTotalAmount() {
    let totalAmount = 0;
    
    // Pobierz wszystkie wiersze z kategoriami
    const categoryRows = document.querySelectorAll('#categories-container .row.top-buffer-20');
    
    // Dla każdego wiersza z kategorią, weź tylko pierwsze pole (główną kwotę)
    for (let i = 0; i < categoryRows.length; i++) {
      // Znajdź pierwszy div z klasą col-md-2 w bieżącym wierszu, a następnie pole input w nim
      const firstColumn = categoryRows[i].querySelector('.col-md-2');
      if (firstColumn) {
        const mainAmountField = firstColumn.querySelector('input.category');
        if (mainAmountField) {
          const value = parseFloat(mainAmountField.value) || 0;
          totalAmount += value;
        }
      }
    }
    
    return totalAmount;
  }
  
  // Po załadowaniu strony sprawdź, czy właśnie zmieniono typ wpisu
  document.addEventListener('DOMContentLoaded', function() {
    try {
      // Inicjalizacja kalendarza dla pola daty
      if (typeof $.fn.datepicker !== 'undefined') {
        $('#entry_date').datepicker({
          format: 'yyyy-mm-dd',
          autoclose: true,
          todayHighlight: true,
          language: 'pl'
        });
      }
      
      // Formatowanie pól kwot
      const formatAmountFields = function() {
        $('input.category').on('blur', function() {
          let value = $(this).val().replace(',', '.');
          if (value && !isNaN(parseFloat(value))) {
            $(this).val(parseFloat(value).toFixed(2));
          }
        });
      };
      
      // Wywołaj formatowanie kwot
      formatAmountFields();
      
      <% if @entry.id.present? && params[:type_changed].blank? %>
      // Ustaw odpowiedni przycisk radiowy na podstawie wartości is_expense
      const isExpense = <%= @entry.is_expense ? 'true' : 'false' %>;
      if (isExpense) {
        document.getElementById('entry_type_expense').checked = true;
      } else {
        document.getElementById('entry_type_income').checked = true;
      }
      <% end %>
      
      const urlParams = new URLSearchParams(window.location.search);
      const typeChanged = urlParams.get('type_changed');
      
      if (typeChanged) {
        try {
          const savedDataStr = localStorage.getItem('entryTypeChangeData');
          if (!savedDataStr) {
            console.warn('Brak zapisanych danych w localStorage dla zmiany typu wpisu');
            return;
          }
          
          const savedData = JSON.parse(savedDataStr);
          if (!savedData) {
            console.warn('Nie można odczytać danych z localStorage');
            return;
          }
          
          // Ustaw zapisane wartości w formularzu
          if (savedData.date) document.getElementById('entry_date').value = savedData.date;
          
          // Ustaw pola specyficzne dla typu księgi
          const isBankJournal = <%= @journal.journal_type_id == JournalType::BANK_TYPE_ID ? 'true' : 'false' %>;
          if (isBankJournal && savedData.statementNumber) {
            document.getElementById('entry_statement_number').value = savedData.statementNumber;
          }
          
          if (savedData.documentNumber) {
            document.getElementById('entry_document_number').value = savedData.documentNumber;
          }
          
          if (savedData.name) document.getElementById('entry_name').value = savedData.name;
          
          // Ustaw pierwszą kategorię na zapisaną kwotę
          if (savedData.amount) {
            const firstCategory = document.querySelector('input.category');
            if (firstCategory) {
              // Zachowaj oryginalny znak wartości (dodatni lub ujemny)
              const amountValue = parseFloat(savedData.amount);
              firstCategory.value = amountValue.toFixed(2);
            }
          }
          
          // Wyczyść zapisane dane
          localStorage.removeItem('entryTypeChangeData');
        } catch (e) {
          console.error('Błąd podczas odczytywania danych z localStorage:', e);
        }
      }
    } catch (error) {
      console.error('Błąd podczas inicjalizacji formularza:', error);
    }
  });
</script>
